"use client"

import { useEffect, useState } from "react"
import { Card, CardContent } from "@/components/ui/card"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Search, Plus, Calendar, User, MapPin } from "lucide-react"
import { Badge } from "@/components/ui/badge"
import { useBookingStore } from "@/lib/booking-store"
import { useUserStore } from "@/lib/user-store"
import { db, initDb } from "@/lib/db"
import { useToast } from "@/components/ui/use-toast"
import { format } from "date-fns"

interface Booking {
  id: string
  productId: string
  productName: string
  productImage?: string
  startDate: string
  endDate: string
  totalAmount: number
  currency: string
  status: "pending" | "confirmed" | "active" | "completed" | "cancelled"
  customerId: string
  customerName: string
  createdAt: string
  location: string
}

type SearchFilters = {
  query: string
  status: string | null
}

const formatDate = (dateStr: string) => {
  return format(new Date(dateStr), "MMM d, yyyy")
}

const BookingCard = ({ booking, onStatusUpdate }: { booking: Booking; onStatusUpdate: (id: string, status: Booking["status"]) => void }) => {
  return (
    <Card key={booking.id}>
      <CardContent className="p-6">
        <div className="flex items-center justify-between">
          <div className="flex flex-col">
            <div className="flex items-center gap-2">
              <h3 className="font-semibold text-lg">{booking.productName}</h3>
              <Badge
                variant={
                  booking.status === "active" || booking.status === "confirmed"
                    ? "default"
                    : booking.status === "completed"
                    ? "secondary"
                    : booking.status === "cancelled"
                    ? "destructive"
                    : "outline"
                }
              >
                {booking.status}
              </Badge>
            </div>
            <p className="text-sm text-muted-foreground">Booking ID: {booking.id}</p>
          </div>
          <div className="font-bold">{booking.currency} {booking.totalAmount.toFixed(2)}</div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-4">
          <div className="flex items-center gap-2">
            <User className="h-4 w-4 text-muted-foreground" />
            <div>
              <p className="text-sm font-medium">Customer</p>
              <p className="text-sm text-muted-foreground">{booking.customerName}</p>
            </div>
          </div>
          <div className="flex items-center gap-2">
            <Calendar className="h-4 w-4 text-muted-foreground" />
            <div>
              <p className="text-sm font-medium">Rental Period</p>
              <p className="text-sm text-muted-foreground">
                {formatDate(booking.startDate)} - {formatDate(booking.endDate)}
              </p>
            </div>
          </div>
          <div className="flex items-center gap-2">
            <MapPin className="h-4 w-4 text-muted-foreground" />
            <div>
              <p className="text-sm font-medium">Pickup Location</p>
              <p className="text-sm text-muted-foreground">{booking.location}</p>
            </div>
          </div>
        </div>

        <div className="flex justify-end gap-2 mt-4">
          <Button variant="outline" size="sm">View Details</Button>
          {booking.status === "pending" && (
            <>
              <Button
                variant="outline"
                size="sm"
                onClick={() => onStatusUpdate(booking.id, "cancelled")}
              >
                Reject
              </Button>
              <Button
                size="sm"
                onClick={() => onStatusUpdate(booking.id, "confirmed")}
              >
                Approve
              </Button>
            </>
          )}
          {booking.status === "active" && (
            <Button
              size="sm"
              onClick={() => onStatusUpdate(booking.id, "completed")}
            >
              Mark as Returned
            </Button>
          )}
        </div>
      </CardContent>
    </Card>
  )
}

export default function BookingsPage() {
  const bookingStore = useBookingStore()
  const { users } = useUserStore()
  const { toast } = useToast()
  const [mounted, setMounted] = useState(false)
  const [searchFilters, setSearchFilters] = useState<SearchFilters>({
    query: "",
    status: null,
  })

  useEffect(() => {
    const loadData = async () => {
      await initDb()
      setMounted(true)
    }
    loadData()
  }, [])

  if (!mounted) {
    return (
      <div className="flex flex-col gap-6">
        <div className="flex flex-col gap-2">
          <h1 className="text-3xl font-bold tracking-tight">Bookings</h1>
          <p className="text-muted-foreground">Loading bookings data...</p>
        </div>
      </div>
    )
  }

  // Filter and sort bookings
  const filteredBookings = (bookingStore.bookings || [])
    .filter(booking => {
      if (!searchFilters.query) return true
      const searchLower = searchFilters.query.toLowerCase()
      return (
        booking.customerName.toLowerCase().includes(searchLower) ||
        booking.productName.toLowerCase().includes(searchLower) ||
        booking.location.toLowerCase().includes(searchLower)
      )
    })
    .filter(booking => {
      if (!searchFilters.status || searchFilters.status === "all") return true
      return booking.status === searchFilters.status
    })
    .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime())

  // Handle status update
  const handleStatusUpdate = async (bookingId: string, newStatus: Booking["status"]) => {
    try {
      await bookingStore.updateBookingStatus(bookingId, newStatus)
      toast({
        title: "Booking updated",
        description: "The booking status has been updated successfully.",
      })
    } catch (error) {
      toast({
        title: "Update failed",
        description: "Failed to update booking status. Please try again.",
        variant: "destructive",
      })
    }
  }

  return (
    <div className="flex flex-col gap-6">
      <div className="flex flex-col gap-2">
        <h1 className="text-3xl font-bold tracking-tight">Bookings</h1>
        <p className="text-muted-foreground">Manage all equipment bookings and reservations.</p>
      </div>

      <div className="flex items-center justify-between">
        <div className="relative w-full max-w-sm">
          <Search className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
          <Input
            type="search"
            placeholder="Search bookings..."
            className="w-full bg-background pl-8 shadow-none md:w-[300px]"
            value={searchFilters.query}
            onChange={(e) => setSearchFilters(prev => ({ ...prev, query: e.target.value }))}
          />
        </div>
        <Button>
          <Plus className="mr-2 h-4 w-4" />
          New Booking
        </Button>
      </div>

      <Tabs
        defaultValue="all"
        className="space-y-4"
        onValueChange={(value) => setSearchFilters(prev => ({ ...prev, status: value }))}
      >
        <TabsList>
          <TabsTrigger value="all">All</TabsTrigger>
          <TabsTrigger value="active">Active</TabsTrigger>
          <TabsTrigger value="pending">Pending</TabsTrigger>
          <TabsTrigger value="completed">Completed</TabsTrigger>
          <TabsTrigger value="cancelled">Cancelled</TabsTrigger>
        </TabsList>

        <TabsContent value="all" className="space-y-4">
          <div className="grid gap-4">
            {filteredBookings.map(booking => (
              <BookingCard
                key={booking.id}
                booking={booking}
                onStatusUpdate={handleStatusUpdate}
              />
            ))}
          </div>
        </TabsContent>

        <TabsContent value="active" className="space-y-4">
          <div className="grid gap-4">
            {filteredBookings
              .filter(b => b.status === "active")
              .map(booking => (
                <BookingCard
                  key={booking.id}
                  booking={booking}
                  onStatusUpdate={handleStatusUpdate}
                />
              ))}
          </div>
        </TabsContent>

        <TabsContent value="pending" className="space-y-4">
          <div className="grid gap-4">
            {filteredBookings
              .filter(b => b.status === "pending")
              .map(booking => (
                <BookingCard
                  key={booking.id}
                  booking={booking}
                  onStatusUpdate={handleStatusUpdate}
                />
              ))}
          </div>
        </TabsContent>

        <TabsContent value="completed" className="space-y-4">
          <div className="grid gap-4">
            {filteredBookings
              .filter(b => b.status === "completed")
              .map(booking => (
                <BookingCard
                  key={booking.id}
                  booking={booking}
                  onStatusUpdate={handleStatusUpdate}
                />
              ))}
          </div>
        </TabsContent>

        <TabsContent value="cancelled" className="space-y-4">
          <div className="grid gap-4">
            {filteredBookings
              .filter(b => b.status === "cancelled")
              .map(booking => (
                <BookingCard
                  key={booking.id}
                  booking={booking}
                  onStatusUpdate={handleStatusUpdate}
                />
              ))}
          </div>
        </TabsContent>
      </Tabs>
    </div>
  )
}
